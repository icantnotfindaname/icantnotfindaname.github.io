<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://icantnotfindaname.github.io</id>
    <title>Louispace</title>
    <updated>2022-02-12T08:19:02.680Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://icantnotfindaname.github.io"/>
    <link rel="self" href="https://icantnotfindaname.github.io/atom.xml"/>
    <subtitle>想做你的对手</subtitle>
    <logo>https://icantnotfindaname.github.io/images/avatar.png</logo>
    <icon>https://icantnotfindaname.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Louispace</rights>
    <entry>
        <title type="html"><![CDATA[国内VPS安装BBRplus]]></title>
        <id>https://icantnotfindaname.github.io/post/guo-nei-vps-an-zhuang-bbrplus/</id>
        <link href="https://icantnotfindaname.github.io/post/guo-nei-vps-an-zhuang-bbrplus/">
        </link>
        <updated>2022-02-12T08:16:38.000Z</updated>
        <content type="html"><![CDATA[<p><a href="https://raw.githubusercontent.com/cx9208/Linux-NetSpeed/master/bbrplus/centos/7/kernel-4.14.129-bbrplus.rpm">内核下载地址</a></p>
<p>安装代码如下：</p>
<pre><code>yum install -y kernel-4.14.129-bbrplus.rpm
grub2-set-default 'CentOS Linux (4.14.129-bbrplus) 7 (Core)'
echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf
echo &quot;net.ipv4.tcp_congestion_control=bbrplus&quot; &gt;&gt; /etc/sysctl.conf
reboot
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二叉树线索化]]></title>
        <id>https://icantnotfindaname.github.io/post/er-cha-shu-xian-suo-hua/</id>
        <link href="https://icantnotfindaname.github.io/post/er-cha-shu-xian-suo-hua/">
        </link>
        <updated>2021-11-10T08:57:48.000Z</updated>
        <summary type="html"><![CDATA[<p>前面复习的时候疏忽的一个知识点。写篇文章找补一下。</p>
]]></summary>
        <content type="html"><![CDATA[<p>前面复习的时候疏忽的一个知识点。写篇文章找补一下。</p>
<!-- more -->
<p>线索化的精髓在于：<strong>在遍历的框架下进行额外的操作。</strong></p>
<p>以中序遍历为例，已知其递归的遍历算法如下：</p>
<pre><code class="language-C++">void inOrder (BiTree T) {
    inOrder(T-&gt;lchild);
    visit(T);
    inOrder(T-&gt;rchild);
}
</code></pre>
<p>重点就在于中间的<code>visit</code>函数了，这个函数用于访问结点，如果只是单纯的遍历的话，那我们只需要在这个函数里把结点的值打印出来就行；但在这里我们要做线索化的话，就必须对这个函数进行改造，如下：</p>
<pre><code class="language-C++">global node *p = NULL;
global node *pre = NULL;

void visit (node *q) {
    if (q-&gt;lchild == NULL) {
        q-&gt;lchild = pre;
        q-&gt;ltag = 1;
    }
    if (pre != NULL &amp;&amp; pre-&gt;rchild == NULL) {
        pre-&gt;rchild = pre;
        pre-&gt;rtag = 1;
    }
    pre = q;
}
</code></pre>
<p>以上函数向目标结点加入前驱，向目标结点的前驱结点加入后继（如果可以的话）。但还有几个需要注意的问题：</p>
<ol>
<li>最后我们需要对遍历的最后一个结点进行特殊处理 —— <code>if (pre-&gt;rchild == NULL) pre-&gt;rtag = 1</code></li>
<li>在先序遍历中，由于<code>visit</code>函数是放在最前面的，所以在处理完根节点后访问左结点是有可能访问到根结点的前驱结点的。即，本来左结点是空的，但是要访问时左结点里面已经存放了根结点的前驱结点了。这样就会出现循环问题，所以需要在遍历的逻辑中加入判断：<code>if (T-&gt;ltag != 1) preOrder(T-&gt;lchild)</code></li>
</ol>
<!-- more -->
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于算法复杂度的几道题]]></title>
        <id>https://icantnotfindaname.github.io/post/guan-yu-suan-fa-fu-za-du-de-ji-dao-ti/</id>
        <link href="https://icantnotfindaname.github.io/post/guan-yu-suan-fa-fu-za-du-de-ji-dao-ti/">
        </link>
        <updated>2021-10-30T11:13:14.000Z</updated>
        <summary type="html"><![CDATA[<p>数据结构重要考点 - 1</p>
]]></summary>
        <content type="html"><![CDATA[<p>数据结构重要考点 - 1</p>
<!-- more -->
<ol>
<li>求以下算法的时间复杂度：</li>
</ol>
<pre><code class="language-C++">for(i=1;i&lt;=n;i++)  {
    for(j=1;j&lt;=i;j++)  {
        for(k=1;k&lt;=j;k++)
            x=x+2;
    }
}
</code></pre>
<p>最后算出来的循环次数应该是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mi>n</mi><mo>(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>)</mo><mo>(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn><mo>)</mo></mrow><mn>6</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n(n+1)(2n+1)}{6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">6</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>
一般这种累加的题，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span> 层循环的算法复杂度就是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mi>k</mi></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^k)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<ol start="2">
<li>某算法的时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，表明该算法的（）<br>
A. 问题规模是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><br>
B. 执行时间等于 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><br>
C. 执行时间与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 成正比<br>
D. 问题规模与 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 成正比</li>
</ol>
<p>问题规模依然是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，时间复杂度表示的是其代码的执行时间与其成正比。</p>
<ol start="3">
<li>下面程序片段的时间复杂度是（）</li>
</ol>
<pre><code class="language-C++">x=2;
while(x&lt;n/2)
  x=2*x;
</code></pre>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(log_2 n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span> 的常见形态。</p>
<ol start="4">
<li>
<p>递归代码的时间复杂度求解一般都是深度与单层复杂度的乘积。</p>
</li>
<li>
<p>算法原地工作的含义是<strong>算法需要的辅助空间是常量</strong>。</p>
</li>
<li>
<p>空间复杂度主要是各种数组所占的空间，递归栈所占的空间（一般就是递归栈的深度）之类的。注意数组在函数中作为参数出现的时候，占的空间只是指针，而不是整个数组。</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于魔术的几点]]></title>
        <id>https://icantnotfindaname.github.io/post/guan-yu-mo-zhu-de-ji-dian/</id>
        <link href="https://icantnotfindaname.github.io/post/guan-yu-mo-zhu-de-ji-dian/">
        </link>
        <updated>2021-10-08T10:53:54.000Z</updated>
        <summary type="html"><![CDATA[<ol start="0">
<li>近日做了一个关于魔术的梦，梦中尝试着找到巴格拉斯效果的解，于是上网找了几个魔术视频重温了一下。继而发现了视频下方有许多争论，故作此篇。以下开始。</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<ol start="0">
<li>近日做了一个关于魔术的梦，梦中尝试着找到巴格拉斯效果的解，于是上网找了几个魔术视频重温了一下。继而发现了视频下方有许多争论，故作此篇。以下开始。</li>
</ol>
<!-- more -->
<ol>
<li>当魔术师再三激烈强调他没有 pre-show 或者 stooges 的时候（包括反复询问、对天发誓等），那就是没有。许多人会习惯性地把无法解释的手法归结为台上台下的串通，即使魔术师反复解释，这无异于怀疑一个职业棋手在比赛中使用人工智能，等同于游戏中的打不过就是挂。—— 是对一个专业魔术师尊严的无情践踏。</li>
<li>关于近景魔术：5年前的我完全钟爱于近景魔术（中的纯手法扑克牌魔术），那种只凭手法而不依靠任何道具的快感...... 罗宾的教学入门，早期刘谦的魔术录像，以及后起之秀 Shin Lin 和 Eric Chien（他在 2019 年的世界魔术大赛表演着实令人震撼，和别的近景魔术师不同，他的手法十分柔顺，与整个人的气质融为一体，对我而言十分具有吸引力）的魔术录像...... 甚至可以扩展到千术，尤其是郑xx和马xx...... 但当你可以清楚知道（即使那个魔术师手速爆表，完全看不出破绽，但你知道他就是用了）他用了什么 force 技巧或者各种 palm 或假切，甚至落汗之后，一切就变得有些索然无味了起来。继而转到了更深层次的注意力转移、牌序应用...... 终究还是不够。</li>
<li>关于大型魔术：这是我从来都没喜欢过的范畴，不知道这个概念是否正确。但我印象中的大型魔术就是各种道具，大黑箱子，人体切割，瞬间移动...... 并不否认有许多出色的大型魔术，但他们永远不在我的喜爱范围之内。</li>
<li>关于心灵魔术：一开始看的当然是 Max Maven 和 Derren Brown 了，心灵魔术更加注重于对表演的设计，加上一些心理学技术，NLP 催眠疗法等...... 但，大多数仍然可以用手法和精巧的道具设计来解释，这也是心灵魔术最常被误解的地方（我想）。最吸引我的地方在于 mental magic，其实我更想说 mentalism，在面对不同的群体的时候如何改进自己的表演技巧，如何让手法与自己的行为、言语、和观众的互动融为一体，换句话说，这个魔术是有破绽的，但是魔术师会通过设计让这个破绽完全不可能让你察觉到（纯手法魔术则是单纯依靠角度，所以这里想表达的其实是，前者是通过手法调整角度，而心灵魔术不止于此，她可以让观众主动避开那个角度 —— 视觉角度和思考角度，或许纯手法也可以，可能心灵魔术更加明显吧），也正是如此才让魔术有了更多的可能性。</li>
<li>再但是，依然不能忘记基础手法的重要性，以及基础手法创新的重要性。</li>
<li>刘谦在哔哩哔哩上发布 M.E.E.T 的表演视频时在留言区的话语令我印象深刻：</li>
</ol>
<blockquote>
<p>...... 我想到这场表演有个小插曲其实可以说一下。演出前一天，我跟其他嘉宾喝着啤酒，在座有Cyril，Daniel Garcia，蔡威泽，韩国的 Chraming Chio, Lee Eun Gyeol，西班牙的 Dani Daotiz 等等...... 我说到明天我打算表演一个魔术，准备找一堆魔术师上台当观众，但困扰着我的是如何证明参与的观众不是托。因为如果这个魔术用到了托就没意义了。于是所有人一边喝着啤酒，一边讨论了快一个半小时。有人可以丢球随机选人，有人说可以六位台湾魔术师各带一位观众上台，有人说可以在观众席表演，想法很多，但都不是我要的。因为会打乱表演节奏。直到，酒量很差的 Lee Eun Gyeol 睡眼惺忪嘟囔了一句：“我觉得，也许，不用证明耶..... 是不是托不是一眼就能看出来吗？如果是真的，大家都能感觉到的吧。” 所有魔术师沉默了几秒。一致认同，点头同意。心中暗地承认，我们都入魔了。一眼就能看出的事实，何必证明。</p>
</blockquote>
<ol start="7">
<li>突然想到有一段时间我曾经兴致勃勃地想逐一破解周杰伦在综艺里的每个魔术，但半途而废了，因为有些实在是让人没有探索的欲望。在观众心中形成一个谜题，这是让其感到奇迹的前提条件。</li>
<li>早年看了一些 Penguin Live 的视频，非常具有启发性，但并没有完全看完，写文章时看到 2021 年还出了 Adam Wilber 等...... #Todo 这或许是未来某段时间的用餐计划。以及原来 Lu Qian 和 Max Maven 也去过企鹅讲座，真的是跟不上时代。</li>
<li>关于魔术与手部极限运动：私以为魔术要更高阶一些，可以将其看作是艺术的一个门类（狭义的艺术）。但我永远（永远）不会把魔方、转笔、溜溜球或者 pen-beat 视作艺术（同样是狭义的）的一部分。不知具体原因，但应该涉及到观众的问题。</li>
<li>同样道理的还有视觉艺术，但或许有天我会转变观点 —— 视觉艺术是最烂的一种艺术。最后一个确凿的观点：世界是平的，艺术是尖的。来自木心。</li>
</ol>
<p>END.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一元积分学的概念和计算]]></title>
        <id>https://icantnotfindaname.github.io/post/yi-yuan-ji-fen-xue-de-gai-nian-he-ji-suan/</id>
        <link href="https://icantnotfindaname.github.io/post/yi-yuan-ji-fen-xue-de-gai-nian-he-ji-suan/">
        </link>
        <updated>2021-09-20T01:43:08.000Z</updated>
        <summary type="html"><![CDATA[<p>这一章和一元微分学构成了高等数学的两大计算基础（自己说的），为了基本掌握这一章，真是要了我的老命了。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这一章和一元微分学构成了高等数学的两大计算基础（自己说的），为了基本掌握这一章，真是要了我的老命了。</p>
<!-- more -->
<h3 id="两个存在定理">两个存在定理</h3>
<p>首先是两个存在定理，一个是<strong>原函数（不定积分）存在定理</strong>，一个是<strong>定积分存在定理</strong>。原函数存在只需要连续即可，连续分为两种，一种是<strong>直接连续</strong>，一种是<strong>间断连续</strong>，也就是在函数存在振荡间断点的时候，可以近似看成是连续的。定积分存在从本质上讲就是需要一个条件，那就是<strong>有界</strong>（这是一个必要条件）。根据这个条件，就可以把条件具体化一下：1. 连续 2. 单调 3. 有界 + 有限个间断点 （这些其实隐藏的都是一个条件，那就是有界，再具体化一点就是有限个 x 和有限个 y。</p>
<h3 id="补充间断点">补充：间断点</h3>
<ol>
<li>第一类
<ol>
<li>跳跃间断点 =》双侧极限不存在</li>
<li>可去间断点 =》<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>lim</mi><mo>⁡</mo><mrow><mi>x</mi><mo>→</mo><msub><mi>x</mi><mn>0</mn></msub></mrow></msub><msup><mi>F</mi><mo mathvariant="normal">′</mo></msup><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>A</mi><mi mathvariant="normal">≠</mi><msup><mi>F</mi><mo mathvariant="normal">′</mo></msup><mrow><mo fence="true">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\lim _{x \rightarrow x_{0}} F^{\prime}(x)=A \neq F^{\prime}\left(x_{0}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001992em;vertical-align:-0.2501em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139199999999997em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span></li>
</ol>
</li>
<li>第二类
<ol>
<li>无穷间断点：极限无穷</li>
<li>振荡间断点：极限在交替振荡（准确来说是间断点的邻域在不断的振荡）</li>
</ol>
</li>
</ol>
<h3 id="基本积分公式">基本积分公式</h3>
<p>根据本人的潜心钻研，把基本的积分公式分为九组：</p>
<ol>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">sinx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">cosx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">x</span></span></span></span> =&gt; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">-cosx + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">sinx + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mi>x</mi></mrow><annotation encoding="application/x-tex">sin^2x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mi>x</mi></mrow><annotation encoding="application/x-tex">cos^2x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span></span> =&gt; 这个用的是倍角公式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>(</mo><mi>x</mi><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>s</mi><mi>i</mi><mi>n</mi><mn>2</mn><mi>x</mi><mo>)</mo><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\frac{1}{2} (x-\frac{1}{2}sin2x) + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac><mo>(</mo><mi>x</mi><mo>+</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>s</mi><mi>i</mi><mi>n</mi><mn>2</mn><mi>x</mi><mo>)</mo><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">\frac{1}{2} (x+\frac{1}{2}sin2x) + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">cscx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">secx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">x</span></span></span></span> =&gt; 这两个直接记就行 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi><mo>+</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">ln|secx + tanx| + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mord">∣</span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><mo>−</mo><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">ln|cscx -tanx| + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mord">∣</span><span class="mord mathdefault">c</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>e</mi><msup><mi>c</mi><mn>2</mn></msup><mi>x</mi></mrow><annotation encoding="application/x-tex">sec^2x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>s</mi><msup><mi>c</mi><mn>2</mn></msup><mi>x</mi></mrow><annotation encoding="application/x-tex">csc^2x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span></span> =&gt; 这两个也是求导公式直接记就行了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">tanx + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">-cotx + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">tanx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">cotx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">x</span></span></span></span> =&gt; <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>c</mi><mi>o</mi><mi>s</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">-ln|cosx| + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mord">∣</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>l</mi><mi>n</mi><mi mathvariant="normal">∣</mi><mi>s</mi><mi>i</mi><mi>n</mi><mi>x</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">ln|sinx| + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mord">∣</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>a</mi><msup><mi>n</mi><mn>2</mn></msup><mi>x</mi></mrow><annotation encoding="application/x-tex">tan^2x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><msup><mi>t</mi><mn>2</mn></msup><mi>x</mi></mrow><annotation encoding="application/x-tex">cot^2x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span></span></span></span> =&gt; 这两个利用的是公式 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>a</mi><msup><mi>n</mi><mn>2</mn></msup><mi>x</mi><mo>=</mo><mi>s</mi><mi>e</mi><msup><mi>c</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">tan^2x = sec^2x - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>o</mi><msup><mi>t</mi><mn>2</mn></msup><mi>x</mi><mo>=</mo><mi>c</mi><mi>s</mi><msup><mi>c</mi><mn>2</mn></msup><mi>x</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">cot^2x = csc^2x - 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">s</span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 结果是 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi><mo>−</mo><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">tanx - x + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi><mo>−</mo><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">-cotx - x + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi><mi>t</mi><mi>a</mi><mi>n</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">secxtanx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">x</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>s</mi><mi>c</mi><mi>x</mi><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">cscxcotx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">s</span><span class="mord mathdefault">c</span><span class="mord mathdefault">x</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">x</span></span></span></span> =&gt; 求导公式直接记就行了 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>e</mi><mi>c</mi><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">secx + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">e</span><span class="mord mathdefault">c</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>−</mo><mi>c</mi><mi>o</mi><mi>t</mi><mi>x</mi><mo>+</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">-cotx + C</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{1 + x^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{a^2 + x^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msqrt><mrow><mn>1</mn><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{1 - x^2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.383108em;vertical-align:-0.538em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5445179999999996em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9221171428571429em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.882117142857143em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11788285714285718em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msqrt><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{a^2 - x^2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.383108em;vertical-align:-0.538em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5445179999999996em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9221171428571429em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.882117142857143em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11788285714285718em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{x^2 + a^2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.383108em;vertical-align:-0.538em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5445179999999996em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9221171428571429em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.882117142857143em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11788285714285718em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><msqrt><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></msqrt></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{\sqrt{x^2 - a^2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.383108em;vertical-align:-0.538em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5445179999999996em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9221171428571429em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.882117142857143em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11788285714285718em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mn>1</mn><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{x^2 - a^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7463142857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mrow><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{a^2 - x^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.12661100000000003em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.913389em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.740108em;"><span style="top:-2.9890000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.873389em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.12661100000000003em;"><span></span></span></span></span></span></span></span></span></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[构造二叉树]]></title>
        <id>https://icantnotfindaname.github.io/post/gou-zao-er-cha-shu/</id>
        <link href="https://icantnotfindaname.github.io/post/gou-zao-er-cha-shu/">
        </link>
        <updated>2021-09-11T07:25:16.000Z</updated>
        <summary type="html"><![CDATA[<p>这也是比较难的一个算法点，难点主要在于步骤有些繁复，且递归条件和区间开闭容易遗漏或者搞错。可以在力扣找到对应的题目。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这也是比较难的一个算法点，难点主要在于步骤有些繁复，且递归条件和区间开闭容易遗漏或者搞错。可以在力扣找到对应的题目。</p>
<!-- more -->
<h2 id="从中序和后序遍历序列构造二叉树">从中序和后序遍历序列构造二叉树</h2>
<p>不管是【中序 + 前序】还是【中序 + 后序】，其实思路都是一样的，大概分为以下几个步骤：</p>
<ol>
<li>通过后序（或者前序）序列找到树的根节点</li>
<li>通过中序序列确定根节点的左右子树</li>
<li>回过头来分割后序序列</li>
<li>递归处理左右区间</li>
</ol>
<p>这里理所应当该采用递归的算法，所以还要考虑一下递归的三个步骤，并且在进行数组分割的时候要考虑清楚区间的的开闭，在以下的代码中我选择了左开右闭的实现方式。</p>
<p>先给出伪代码：</p>
<pre><code class="language-C++">// is = start index of inorder, ie = end index of inorder ...... 
TreeNode* build(vector&lt;int&gt;&amp; inorder, int is, int ie, vector&lt;int&gt;&amp; postorder, int ps, int pe) {
    // return addition - 1
    if (pe == ps) return NULL;   // 因为是左闭右开，所以当 `pe == ps` 时数组中就已经没有任何节点了。

    // return addition - 2
    TreeNode* root = new TreeNode(postorder[pe - 1]);
    if (ps == pe - 1) return root;

    // find the dividing index
    // todo

    // divide inorder vector 
    // todo
    
    // divide preorder vector 
    // todo

    // ls_i 表示 left-start-inorder 中序序列左子树的起始索引，其他的依此类推
    root-&gt;left = build(inorder, ls_i, le_i, postorder, ls_p, le_p);
    root-&gt;right = build(inorder, rs_i, re_i, postorder, rs_p, re_p);
}
</code></pre>
<p>重点代码就在找到分割节点和分割两个数组这里了，代码如下：</p>
<pre><code class="language-C++">    // find the dividing index 
    int p;
    for (int p = is, p &lt; ie; p++) 
        if (inorder[p] == root-&gt;val)
            break;

    // divide inorder vector 
    ls_i = is;
    le_i = p;
    rs_i = p + 1;
    re_i = ie;

    // divide postorder vector 
    ls_p = ps;
    le_p = ps + p - is;
    rs_p = le_p;
    re_p = pe - 1;
</code></pre>
<p>首先根据一个循环在中序序列中找到根节点的索引，然后索引左边就是左子树，右边就是右子树；接下来开始切割后序序列，记中序序列分割得到的左子树中有 n 个节点，那么后序序列中的前 n 个节点就是左子树，剩下的节点就在右子树中。</p>
<p>这样整个递归函数就写完了，我们只需要在主函数中调用这个递归函数就可以了，代码如下：</p>
<pre><code class="language-C++">TreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; postorder) {
    if (postorder.size() == 0 || inorder.size() == 0) return NULL;
    return build(inorder, 0, inorder.size(), postorder, 0, postorder.size());
}
</code></pre>
<h2 id="从中序和前序遍历序列构造二叉树">从中序和前序遍历序列构造二叉树</h2>
<p>如上所述，整个过程与【中序 + 后序】并没有什么区别。代码如下：</p>
<pre><code class="language-C++">TreeNode* build(vector&lt;int&gt;&amp; inorder, int is, int ie, vector&lt;int&gt;&amp; preorder, int ps, int pe) {
    if (ps == pe) return NULL;

    TreeNode* root = new TreeNode(preorder[ps]);
    if (pe == ps + 1) return root;

    int p;
    for (p = is; p &lt; ie; p++) 
        if (inorder[p] == root-&gt;val)
            break;
    
    // divide inorder 
    int ls_i = is;
    int le_i = p;
    int rs_i = p + 1;
    int re_i = ie;

    // divide preorder 
    int ls_p = ps + 1;
    int le_p = ps + 1 + p - is;
    int rs_p = le_p;
    int re_p = pe;

    root-&gt;left = build(inorder, ls_i, le_i, preorder, ls_p, le_p);
    root-&gt;right = build(inorder, rs_i, re_i, preorder, rs_p, re_p);

    return root;
}

TreeNode* buildTree(vector&lt;int&gt;&amp; inorder, vector&lt;int&gt;&amp; preorder) {
    if (inorder.size() == 0 || preorder.size() == 0) return NULL;
    return build(inorder, 0, inorder.size(), preorder, 0, preorder.size());
}
</code></pre>
<p>最后再注意一下以下几个点：</p>
<ol>
<li>区间的开闭</li>
<li>不要忘了返回值</li>
<li>注意递归的结束条件</li>
<li>参数太多不要混淆</li>
<li>没了</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[递归与回溯：以二叉树为例]]></title>
        <id>https://icantnotfindaname.github.io/post/di-gui-yu-hui-su-yi-er-cha-shu-wei-li/</id>
        <link href="https://icantnotfindaname.github.io/post/di-gui-yu-hui-su-yi-er-cha-shu-wei-li/">
        </link>
        <updated>2021-09-06T09:23:15.000Z</updated>
        <summary type="html"><![CDATA[<p>学了三年，还在写这种内容，唉…… 但不得不说，这是一个十分重要的基础问题。</p>
]]></summary>
        <content type="html"><![CDATA[<p>学了三年，还在写这种内容，唉…… 但不得不说，这是一个十分重要的基础问题。</p>
<!-- more -->
<p>这其实是力扣上的一道题：给定一个二叉树，找出其最大深度。</p>
<p>地址：https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/</p>
<h2 id="递归">递归</h2>
<p>递归有三个标准动作：</p>
<ol>
<li>确定函数参数以及返回的类型</li>
<li>确定递归的终止条件</li>
<li>确定单层递归的逻辑</li>
</ol>
<p>用上面的题为例：</p>
<ol>
<li>函数的参数当然就是 <code>TreeNode* root</code> 了，求最大深度，返回的类型就是 <code>int</code> 。</li>
<li>递归的终止条件就是 <code>root == NULL</code>，这个时候直接 <code>return 0</code> 。</li>
<li>单层的递归逻辑其实也很好想，其实就是得到左右子树的最大深度，然后比较之后挑一个比较大的，加上自己本身这一层就是当前接地点的最大深度。</li>
</ol>
<p>然后就可以写代码了：</p>
<pre><code class="language-C++">int maxDepth(TreeNode* root) {
    if (root == NULL) return 0;
    int left = maxDepth(root-&gt;left);
    int right = maxDepth(root-&gt;right);
    int res = left &gt; right ? left : right;
    return res + 1;
}
</code></pre>
<p>这就是一个完整的递归逻辑，最后还有一步就是简化代码（个人习惯，我喜欢首先确定逻辑无误之后再开始对代码进行简化处理，不知道其他人是怎么做的），简化之后的代码如下：</p>
<pre><code class="language-C++">int maxDepth(TreeNode* root) {
    if (root == NULL) return 0;
    return 1 + max(maxDepth(root-&gt;left), maxDepth(root-&gt;right));
}
</code></pre>
<p>注意以上都省略了结构体的编写以及 <code>#include</code> 部分，其中 <code>max</code> 函数位于 <code>#include&lt;algorithm&gt;</code> 中。</p>
<h2 id="回溯">回溯</h2>
<p>以上我们的做法其实是把求最大深度的问题转换成了求树的高度的问题，所以用的是后序遍历式的做法，但其实我们在求深度的时候用的应该是前序遍历式的算法，在前序遍历式算法中，为了达到类似递归的效果，我们就要使用回溯。<strong>回溯和递归是分不开的。</strong></p>
<p>那么上面的问题用前序遍历 + 回溯应该怎么做呢？代码如下：</p>
<pre><code class="language-C++">int result;
void getDepth(TreeNode *root, int depth) {
    result = depth &gt; result ? depth : result;
    if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL) return;
    if (root-&gt;left != NULL) {
        depth++;
        getDepth(root-&gt;left, depth);
        depth--;  // 回溯
    }
    if (root-&gt;right != NULL) {
        depth++;
        getDepth(root-&gt;right, depth);
        depth--;  // 回溯
    }
    return;
}
int maxDepth(TreeNode* root) {
    result = 0;
    if (root == NULL) return 0;
    getDepth(root, 1);
    return result;
}
</code></pre>
<p>这段代码需要注意两个点，一个是 <code>getDepth</code> 函数中的 <code>depth</code> 参数千万不能写成引用型，一个是注意在函数中是如何完成回溯的，在这里利用的是 <code>depth</code> 的增减。但有的时候回溯是没有这么明显的，会隐藏在函数体之中，比如上面的代码其实可以简化，如下所示：</p>
<pre><code class="language-C++">int result;
void getDepth(TreeNode* root, int depth) {
    result = depth &gt; result ? depth : result;
    if (root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL) return; 
    if (root-&gt;left != NULL) getDepth(root-&gt;left, depth +1);  // 回溯在此
    if (root-&gt;right != NULL) getDepth(root-&gt;right, depth + 1);
    return;
}
int maxDepth(TreeNode* root) {
    result = 0;
    if (root == NULL) return 0;
    getDepth(root, 1);
    return result;
}
</code></pre>
<h2 id="总结">总结</h2>
<ol>
<li>递归的三大步骤</li>
<li>回溯的思想和写法</li>
<li>代码简化</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[补码浅析]]></title>
        <id>https://icantnotfindaname.github.io/post/bu-ma-qian-xi/</id>
        <link href="https://icantnotfindaname.github.io/post/bu-ma-qian-xi/">
        </link>
        <updated>2021-09-05T08:02:28.000Z</updated>
        <summary type="html"><![CDATA[<p>定点数的运算忘的差不多了，赶紧重新捡捡。</p>
]]></summary>
        <content type="html"><![CDATA[<p>定点数的运算忘的差不多了，赶紧重新捡捡。</p>
<!-- more -->
<h2 id="来源以及含义">来源以及含义</h2>
<p>补码的定义：给出长度为 n 的数值 y，则 y 的以基数 b 的补码为：b^n - y （即 b 的补码）</p>
<p>说补码首先就得说反码，因为反码是补码的一个过渡，二者的目的都在于改进计算机加减法运算的性能。当没有反码和补码的时候，减法虽然也可以转变成加法去进行运算，但是问题在于，比如，当你计算 1 - 1 的时候，用源码去计算的时候，就会变成 1 + -1 也就是 0001 + 1001，显然算出来根本不是 0。而且还有另外一个问题是用原码表示数字中有一个 +0 和一个 -0，这显然是毫无意义的。于是为了解决第一个问题，人们发明了反码。</p>
<p>反码：正数的反码和原码一样，负数的反码是符号位不变其它位取反。这样就解决了上面的第一个问题，上面的二进制加法用算出来就是  0001 + 1110 = 1111 正好是 -0 的反码，这样就得到了一个正确的结果。但第二个问题依然没有解决。</p>
<p>于是补码来了，这才是最终的解决形态，解决了上述的第二个问题。补码在二进制中就是反码加一，于是可以看到上述 -0 的反码加一之后变成了 10000，丢弃掉溢出的位之后就变成了 0000，刚好是 +0，完美解决。同时，由于只有一种 0 的表示方式，所以补码可以多表示一个负数。</p>
<p>另外，再从更宏观的计算考虑，也就是考虑开头的补码定义，在十进制中，55 - 50 在长度为 3 的情况下就可以写成 45 + 50 = 95 (这里丢弃掉了最高位) 补码刚好 5，得到了正确结果。那么这一切的原理是什么呢？</p>
<p>假设 x ＞ y，则 x - y = b^n - x + b^n + y = b^n - x + y 原码刚好就是 x - y 顺利回来了。</p>
<p>手推，但是我想这应该就是原理了吧。</p>
<h2 id="原码与补码之间的转换">原码与补码之间的转换</h2>
<p>整数的原码、反码、补码全部都是一样的，所以下面求补码的方法全部针对负数。</p>
<ol>
<li>使用定义求解</li>
<li>符号位不变，其他位取反后加1</li>
<li>符号位不变，最右边的1及其左边的数不变，其他位取反</li>
</ol>
<p>比如：</p>
<pre><code>原码：1000000
补码：1111111 + 1 = 10000000 溢出之后截断之后就变成

原码：1001100
补码：1110011 + 1 = 1110100
也可以直接用第三种方法：1 拼接 110 拼接 100 -&gt; 1110100
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[KMP 算法]]></title>
        <id>https://icantnotfindaname.github.io/post/kmp-suan-fa/</id>
        <link href="https://icantnotfindaname.github.io/post/kmp-suan-fa/">
        </link>
        <updated>2021-09-03T08:34:48.000Z</updated>
        <summary type="html"><![CDATA[<p>这个算法堪称整个数据结构考研中最难的一个算法，第一次看的时候也是一脸懵逼。为了表达对它的敬意，写一篇文章集中解决ta。</p>
]]></summary>
        <content type="html"><![CDATA[<p>这个算法堪称整个数据结构考研中最难的一个算法，第一次看的时候也是一脸懵逼。为了表达对它的敬意，写一篇文章集中解决ta。</p>
<!-- more -->
<h3 id="next-数组的作用">next 数组的作用</h3>
<p>这个其实很好理解，next 数组就是为了避免像暴力匹配算法一样，一发现文本串与模式串不匹配就必须重置指针重新从头开始匹配。使用了 next 数组之后，文本串的指针可以不用回溯，所以搜索效率才可以达到 O(m) 其中 m 是文本串的长度。下面给出一个例子：</p>
<pre><code>文本串：aabaabaaf
模式串：aabaaf
</code></pre>
<p>首先两个字符串的指针都从头开始匹配，直到第六个字母的时候发现不匹配。这要是暴力匹配算法就会直接把文本串的指针退回指向第二个字符，模式串指针退回指向开始字符，然后重新开始尝试匹配。但是 KMP 算法就不一样了，本质其实是利用了已匹配字符串的信息，因为很明显模式串往右移一位显然还是不能匹配啊，所以就直接把模式串右移到以下位置：</p>
<pre><code>文本串：aabaabaaf
模式串：xxxaabaaf
</code></pre>
<p>从计算机的角度来说，实现这个效果的方法就是文本串指针保持不动，模式串指针退回指向第三个字符（b）然后继续往后匹配。</p>
<h3 id="next-数组的求法">next 数组的求法</h3>
<p>数组的值只与模式串有关而与文本串无关，next[i] 的含义为：i 包括 i 之前的子数组的<strong>最大相等前后缀的长度</strong>。这里还需要注意一下：前缀的含义是一个字符串除去最后一个字母之外的所有从第一个字母开始的连续字串，后缀也是差不多的道理。所以比如“aabaa”这个字串的最大相等前后缀就是“aa”，所以其最大相等前后缀长度就是 2；“aaaaa”这个字串的最大相等前后缀是“aaaa”，所以最大相等前后缀长度就是 4。以下是具体代码（C++）:</p>
<pre><code class="language-C++">void getNext(int *next, string s) {
    int j = 0;
    next[0] = 0;
    for (int i = 1; i &lt; s.size(); i++) {
        while (j &gt; 0 &amp;&amp; s[i] != s[j]) 
            j = next[j-1];  // 重点语句
        if (s[i] == s[j])
            ++j;
        next[i] = j;
    }
} 
</code></pre>
<p>前面首先对指针和数组进行初始化，重点语句是下面这句，如果新指向字符不匹配，就要重新回到上一个子串（不包含新字符）的最大相等字符长度，然后重新匹配。（这里说的不太清楚，请自行领悟，最好自己在纸上写一下）</p>
<h3 id="kmp-算法写法">KMP 算法写法</h3>
<p>求出 next 数组之后就好办了，每次匹配到不符合的时候，就找已经匹配完的子串的最大相等前后缀，也就是直接查 next 数组，然后把模式串的指针退回去继续匹配就行了。代码如下：</p>
<pre><code class="language-C++">int strStr(string s, string t) {
    if (t.size() == 0)
        return 0;
    int next[t.size()];
    getNext(next, t);
    int j = 0;
    for (int i = 0; i &lt; s.size(); i++) {
        while (j &gt; 0 &amp;&amp; s[i] != t[j]) 
            j = next[j - 1];
        if (s[i] == t[j])
            ++j;
        if (j == t.size())  // 注意这里的判断条件，不是 j == t.size() - 1
            return (i - t.size() + 1);
    }
    return -1;
}
</code></pre>
<p>结束。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[二叉树遍历的非递归做法]]></title>
        <id>https://icantnotfindaname.github.io/post/er-cha-shu-bian-li-de-fei-di-gui-zuo-fa/</id>
        <link href="https://icantnotfindaname.github.io/post/er-cha-shu-bian-li-de-fei-di-gui-zuo-fa/">
        </link>
        <updated>2021-09-02T08:51:11.000Z</updated>
        <summary type="html"><![CDATA[<p>树这种结构，天生就适合用递归的做法来遍历，但是递归太容易了，考研不好考呀，没有区分度。于是出题老头们就开始把脑筋动到了非递归做法上。显而易见，能用递归来做那就肯定可以用循环来做，因为递归实际上就是一个栈的应用，我们只要在循环中引入栈就可以使循环达到向递归一样的效果。</p>
]]></summary>
        <content type="html"><![CDATA[<p>树这种结构，天生就适合用递归的做法来遍历，但是递归太容易了，考研不好考呀，没有区分度。于是出题老头们就开始把脑筋动到了非递归做法上。显而易见，能用递归来做那就肯定可以用循环来做，因为递归实际上就是一个栈的应用，我们只要在循环中引入栈就可以使循环达到向递归一样的效果。</p>
<!-- more -->
<p>但是在先、中、后序遍历中，使用循环实现的难度是不一样的，先序遍历和后序遍历会容易一些，但是中序遍历就稍稍有一定的难度了。原因后文再提。</p>
<p>首先看一下先序遍历的非递归写法：</p>
<pre><code class="language-C++">stack&lt;TreeNode*&gt; st;
void traversal_front_(TreeNode* root, vector&lt;int&gt; &amp;vec) {
    if (root == NULL) return; 
    st.push(root);
    while (!st.empty()) {
        TreeNode* node = st.top();
        st.pop();
        vec.push_back(node-&gt;val);
        if (node-&gt;right) st.push(node-&gt;right);
        if (node-&gt;left) st.push(node-&gt;left);
    }
}
</code></pre>
<p>首先根节点入栈，然后只要当栈不为空的时候就将栈顶弹出，把栈顶加到结果的 vector 数组中，然后将其左右孩子节点（如果有的话）放入栈中，注意这里有一个顺序问题，首先要入栈的是右节点，因为先进是后出的，我们要保证遍历的顺序是“中左右”。</p>
<p>后序遍历也是类似，不同之处在于我们首先将左孩子节点入栈然后才是右孩子节点，这样才能保证结果数组是按照“先右左”的顺序排列的，于是最后只要将整个数组逆过来，就可以得到后序遍历的正确结果。代码如下：</p>
<pre><code class="language-C++">void traversal_back_(TreeNode* root, vector&lt;int&gt; &amp;vec) {
    if (root == NULL) return;
    st.push(root);
    while (!st.empty()) {
        TreeNode* node = st.top();
        st.pop();
        vec.push_back(node-&gt;val);
        if (node-&gt;left) st.push(node-&gt;left);
        if (node-&gt;right) st.push(node-&gt;right);
    }
    reverse(vec.begin(), vec.end());
}
</code></pre>
<p>但是中序遍历就没有这么容易的。问题的关键在于，我们在先序遍历和后序遍历中，<strong>待加到结果数组的节点和需要向下遍历的节点是同一个节点</strong>，所以我们用栈就可以同时实现这两个操作，但是在中序遍历中，上述两种操作的对象并不是同一个节点，所以我们就必须使用再加上一个辅助指针，用栈来处理节点，用指针来遍历树。代码如下：</p>
<pre><code class="language-C++">void traversal_mid_(TreeNode* root, vector&lt;int&gt; &amp;vec) {
    if (root == NULL) return;
    TreeNode* cur = root;
    while (cur != NULL || !st.empty()) {
        if (cur != NULL) {
            st.push(cur);
            cur = cur-&gt;left;
        } else {
            cur = st.top();
            st.pop();
            vec.push_back(cur-&gt;val);
            cur = cur-&gt;right;
        }
    }
}
</code></pre>
<p>首先循环条件就变了，只有当指针和栈同时为空的时候才会停止循环。在循环内，当指针不为空的时候，就把指针指向的节点压入栈中，然后将指针指向其左节点；如果指针为空的话，就要把栈顶弹出，加入结果数组中，然后将指针指向其右节点。</p>
<p>但这种写法又有一个问题了：<strong>三种遍历的写法不统一啊！<strong>对于强迫症患者来说，这真是一个天大的噩耗，但并不是没有解决办法的。核心思想是</strong>在已经可以加入结果数组的节点后面插入一个 NULL 节点作为标记</strong>。</p>
<p>于是中序遍历的代码就变成了这样：</p>
<pre><code class="language-C++">void traversal_mid__(TreeNode* root, vector&lt;int&gt; &amp;vec) {
    if (root != NULL) st.push(root);
    while (!st.empty()) {
        TreeNode* node = st.top();
        if (node != NULL) {
            st.pop();
            if (node-&gt;right) st.push(node-&gt;right);
            st.push(node);
            st.push(NULL);  // mark : ready to add to vector `vec` 
            if (node-&gt;left) st.push(node-&gt;left);
        } else {
            st.pop();  // pop the NULL node
            node = st.top();
            st.pop();
            vec.push_back(node-&gt;val);
        }
    }
}
</code></pre>
<p>重点在于注释的那两句，因为 node 已经访问了其左右孩子节点，所以已经可以加入 vec 了，所以插入一个 NULL 节点作为标识。当 node 为 NULL 时，就证明 NULL 的前驱已经准备好进组了，所以首先<strong>把 NULL 节点弹出</strong>（不要忘了这一步），然后把 node 加进结果数组中。</p>
<p>同样的道理，先序遍历和后序遍历也可以用此方法完成，不同的地方就是节点的进栈次序，其他都是一模一样的，代码如下：</p>
<pre><code class="language-C++">void traversal_front__(TreeNode* root, vector&lt;int&gt; &amp;vec) {
    if (root != NULL) st.push(root);
    while (!st.empty()) {
        TreeNode* node = st.top();
        if (node != NULL) {
            st.pop();
            if (node-&gt;right) st.push(node-&gt;right);
            if (node-&gt;left) st.push(node-&gt;left);
            st.push(node);
            st.push(NULL);  // mark : ready to add to vector `vec` 
        } else {
            st.pop();  // pop the NULL node
            node = st.top();
            st.pop();
            vec.push_back(node-&gt;val);
        }
    }
}

void traversal_back__(TreeNode* root, vector&lt;int&gt; &amp;vec) {
    if (root != NULL) st.push(root);
    while (!st.empty()) {
        TreeNode* node = st.top();
        if (node != NULL) {
            st.pop();
            st.push(node);
            st.push(NULL);  // mark : ready to add to vector `vec`
            if (node-&gt;right) st.push(node-&gt;right);
            if (node-&gt;left) st.push(node-&gt;left);
        } else {
            st.pop();  // pop the NULL node
            node = st.top();
            st.pop();
            vec.push_back(node-&gt;val);
        }
    }
}
</code></pre>
]]></content>
    </entry>
</feed>